package in.co.bel.ims.initial.entity;
// Generated 26-Nov-2022, 9:56:36 am by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.PastOrPresent;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * AnnexUsers generated by hbm2java
 */
@Entity
@Table(name = "annex_users", schema = "tdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class AnnexUsers implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private Department department;
	private EnclosureGroup enclosureGroup;
	private MaritalStatus maritalStatus;
	private Salutation salutation;
	private UserType userType;
	private PayLevel payLevel;
	private Precedence precedence;
	private IdentityProof identityProof;
	private Date doj;
	private String name;
	private String basicPay;
	private Date dob;
	private String mobileNo;
	private String email;
	private String nationality;
	private String address;
	private String recommendingOfficerName;
	private String recommendingOfficerDesignation;
	private String remarks;
	private String idproof;
	private Boolean deleted;
	private String empNo;
	private String officeAddress;
	private String equivalentStatus;
	private String precedenceInfo;
	private String positionMissionConsulate;
	private String constituency;
	private String designation;
	@JsonIgnore
	private Set<Pass> passes = new HashSet<Pass>(0);

	public AnnexUsers() {
	}

	public AnnexUsers(int id) {
		this.id = id;
	}

	public AnnexUsers(int id, EnclosureGroup enclosureGroup, MaritalStatus maritalStatus, Salutation salutation,
			String name, Date dob, String mobileNo, String email, String nationality, String address,
			String recommendingOfficerName, String recommendingOfficerDesignation, String remarks, String idproof,
			Boolean deleted, String empNo, String officeAddress, String equivalentStatus, String precedenceInfo,
			String positionMissionConsulate, String constituency) {
		this.id = id;
		this.enclosureGroup = enclosureGroup;
		this.maritalStatus = maritalStatus;
		this.salutation = salutation;
		this.name = name;
		this.dob = dob;
		this.mobileNo = mobileNo;
		this.email = email;
		this.nationality = nationality;
		this.address = address;
		this.recommendingOfficerName = recommendingOfficerName;
		this.recommendingOfficerDesignation = recommendingOfficerDesignation;
		this.remarks = remarks;
		this.idproof = idproof;
		this.deleted = deleted;
		this.empNo = empNo;
		this.officeAddress = officeAddress;
		this.equivalentStatus = equivalentStatus;
		this.precedenceInfo = precedenceInfo;
		this.positionMissionConsulate = positionMissionConsulate;
		this.constituency = constituency;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "enclosure_group_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public EnclosureGroup getEnclosureGroup() {
		return this.enclosureGroup;
	}

	public void setEnclosureGroup(EnclosureGroup enclosureGroup) {
		this.enclosureGroup = enclosureGroup;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "marital_status_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public MaritalStatus getMaritalStatus() {
		return this.maritalStatus;
	}

	public void setMaritalStatus(MaritalStatus maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "salutation_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public Salutation getSalutation() {
		return this.salutation;
	}

	public void setSalutation(Salutation salutation) {
		this.salutation = salutation;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_type_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public UserType getUserType() {
		return this.userType;
	}

	public void setUserType(UserType userType) {
		this.userType = userType;
	}
	@Column(name = "name", length = 200)
	@NotBlank
	@Pattern(regexp = "[a-zA-Z,.\\s]*", message = "Must not contain special characters")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Temporal(TemporalType.DATE)
	@PastOrPresent(message = "Date of birth can't be a future date")
	@Column(name = "dob", length = 13)
	//@NotNull
	public Date getDob() {
		return this.dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	@Column(name = "mobile_no", length = 20)
	@Size(min=10, max=10, message="Mobile No. should not be more than 10 characters")
	@NotBlank
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getMobileNo() {
		return this.mobileNo;
	}

	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}

	@Column(name = "email", length = 100)
	@Size(max=100, message="It should not be more than 100 characters")
	//@NotBlank
	@Pattern(regexp = "^(?=.{1,100}@)[A-Za-z0-9_-]+([A-Za-z0-9._-]+)*@[^-][A-Za-z0-9-]+([A-Za-z0-9.-]+)*(.[A-Za-z]{2,})$", message = "Please enter valid email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "nationality", length = 50)
	@Size(max=50, message="It should not be more than 50 characters")
	//@NotBlank
	@Pattern(regexp = "[A-za-z\\s]*", message = "Must not contain special characters")
	public String getNationality() {
		return this.nationality;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	@Column(name = "address", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "recommending_officer_name", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z\\s]*", message = "Must not contain special characters")
	public String getRecommendingOfficerName() {
		return this.recommendingOfficerName;
	}

	public void setRecommendingOfficerName(String recommendingOfficerName) {
		this.recommendingOfficerName = recommendingOfficerName;
	}

	@Column(name = "recommending_officer_designation", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z\\s.,&()/]*", message = "Must not contain special characters")
	public String getRecommendingOfficerDesignation() {
		return this.recommendingOfficerDesignation;
	}

	public void setRecommendingOfficerDesignation(String recommendingOfficerDesignation) {
		this.recommendingOfficerDesignation = recommendingOfficerDesignation;
	}

	@Column(name = "remarks", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "idproof", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s/-]*", message = "Must not contain special characters")
	public String getIdproof() {
		return this.idproof;
	}

	public void setIdproof(String idproof) {
		this.idproof = idproof;
	}

	@Column(name = "deleted")
	public Boolean getDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) {
		this.deleted = deleted;
	}

	@Column(name = "emp_no", length = 50)
	@Size(max=50, message="It should not be more than 50 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s/-]*", message = "Must not contain special characters")
	public String getEmpNo() {
		return this.empNo;
	}

	public void setEmpNo(String empNo) {
		this.empNo = empNo;
	}

	@Column(name = "office_address", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getOfficeAddress() {
		return this.officeAddress;
	}

	public void setOfficeAddress(String officeAddress) {
		this.officeAddress = officeAddress;
	}

	@Column(name = "equivalent_status", length = 100)
	@Size(max=100, message="It should not be more than 100 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.&()]*", message = "Must not contain special characters")
	public String getEquivalentStatus() {
		return this.equivalentStatus;
	}

	public void setEquivalentStatus(String equivalentStatus) {
		this.equivalentStatus = equivalentStatus;
	}

	@Column(name = "precedence_info", length = 200)
	public String getPrecedenceInfo() {
		return this.precedenceInfo;
	}

	public void setPrecedenceInfo(String precedenceInfo) {
		this.precedenceInfo = precedenceInfo;
	}

	@Column(name = "position_mission_consulate", length = 100)
	@Size(max=100, message="It should not be more than 100 characters")
	@Pattern(regexp = "[a-zA-Z\\s.,&()/]*", message = "Must not contain special characters")
	public String getPositionMissionConsulate() {
		return this.positionMissionConsulate;
	}

	public void setPositionMissionConsulate(String positionMissionConsulate) {
		this.positionMissionConsulate = positionMissionConsulate;
	}

	@Column(name = "constituency", length = 100)
	@Size(max=100, message="It should not be more than 100 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()&-]*", message = "Must not contain special characters")
	public String getConstituency() {
		return this.constituency;
	}

	public void setConstituency(String constituency) {
		this.constituency = constituency;
	}
	
	@Column(name = "designation", length = 100)
	@Size(max=100, message="It should not be more than 100 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()/&]*", message = "Must not contain special characters")
	public String getDesignation() {
		return this.designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "annexUsers")
	public Set<Pass> getPasses() {
		return this.passes;
	}

	public void setPasses(Set<Pass> passes) {
		this.passes = passes;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pay_level_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public PayLevel getPayLevel() {
		return this.payLevel;
	}

	public void setPayLevel(PayLevel payLevel) {
		this.payLevel = payLevel;
	}
	

	@Temporal(TemporalType.DATE)
	@PastOrPresent(message = "DoJ can't be a future date")
	@Column(name = "doj", length = 13)
	public Date getDoj() {
		return this.doj;
	}

	public void setDoj(Date doj) {
		this.doj = doj;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "precedence_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public Precedence getPrecedence() {
		return this.precedence;
	}

	public void setPrecedence(Precedence precedence) {
		this.precedence = precedence;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_proof_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public IdentityProof getIdentityProof() {
		return this.identityProof;
	}

	public void setIdentityProof(IdentityProof identityProof) {
		this.identityProof = identityProof;
	}
	
	@Column(name = "basic_pay", length = 20)
	@Size(max=8, message="It should not be more than 8 characters")
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getBasicPay() {
		return this.basicPay;
	}

	public void setBasicPay(String basicPay) {
		this.basicPay = basicPay;
	}

}
