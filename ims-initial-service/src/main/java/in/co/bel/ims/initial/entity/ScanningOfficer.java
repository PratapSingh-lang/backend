package in.co.bel.ims.initial.entity;
// Generated 10-Oct-2022, 12:20:35 pm by Hibernate Tools 4.3.5.Final

import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * ScanningOfficer generated by hbm2java
 */
@Entity
@Table(name = "scanning_officer", schema = "mdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class ScanningOfficer implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private String department;
	private Enclosure enclosure;
	private Event event;
	private Integer createdBy;
	private LocalDateTime createdTimestamp;
	private boolean deleted = false;
	private Integer modifiedBy;
	private LocalDateTime modifiedTimestamp;
	private String name;
	private String mobileNo;
	private String email;
	private String passwordSalt;
	private String passwordHash;
	private String alternateMobileNo;
	private String controlOfficerName;
	private String controlOfficerNumber;
	private String remarks;
	private boolean usher = false;

	public ScanningOfficer() {
	}

	public ScanningOfficer(int id) {
		this.id = id;
	}

	public ScanningOfficer(int id, String department, Enclosure enclosure, Event event, Integer createdBy,
			LocalDateTime createdTimestamp, boolean deleted, Integer modifiedBy, LocalDateTime modifiedTimestamp, String name,
			String mobileNo, String email, String passwordSalt, String passwordHash, String alternateMobileNo,
			String controlOfficerName, String controlOfficerNumber, String remarks) {
		this.id = id;
		this.department = department;
		this.enclosure = enclosure;
		this.event = event;
		this.createdBy = createdBy;
		this.createdTimestamp = createdTimestamp;
		this.deleted = deleted;
		this.modifiedBy = modifiedBy;
		this.modifiedTimestamp = modifiedTimestamp;
		this.name = name;
		this.mobileNo = mobileNo;
		this.email = email;
		this.passwordSalt = passwordSalt;
		this.passwordHash = passwordHash;
		this.alternateMobileNo = alternateMobileNo;
		this.controlOfficerName = controlOfficerName;
		this.controlOfficerNumber = controlOfficerNumber;
		this.remarks = remarks;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	
	@Column(name = "department", length = 100)
	@Size(max=100, message="Name should not be more than 100 characters")
	@NotBlank
	@Pattern(regexp = "[a-zA-Z\\s.,()&]*", message = "Must not contain special characters")
	public String getDepartment() {
		return this.department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "enclosure_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Enclosure getEnclosure() {
		return this.enclosure;
	}

	public void setEnclosure(Enclosure enclosure) {
		this.enclosure = enclosure;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "event_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Event getEvent() {
		return this.event;
	}

	public void setEvent(Event event) {
		this.event = event;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "created_timestamp", length = 29)
	public LocalDateTime getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(LocalDateTime createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	@Column(name = "deleted", nullable = false)
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) { 
	 this.deleted = deleted;
		
	}

	@Column(name = "modified_by")
	public Integer getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(Integer modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	@Column(name = "modified_timestamp", length = 29)
	public LocalDateTime getModifiedTimestamp() {
		return this.modifiedTimestamp;
	}

	public void setModifiedTimestamp(LocalDateTime modifiedTimestamp) {
		this.modifiedTimestamp = modifiedTimestamp;
	}

	@Column(name = "name", length = 100)
	@NotBlank
	@Pattern(regexp = "[a-zA-Z\\s]*", message = "Must not contain special characters")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "mobile_no", length = 20)
	@Size(min=10, max=10, message="Mobile No. should not be more than 10 characters")
	@NotBlank
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getMobileNo() {
		return this.mobileNo;
	}

	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}

	@Column(name = "email", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s_@.-]*", message = "Must not contain special characters")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password_salt", length = 500)
	public String getPasswordSalt() {
		return this.passwordSalt;
	}

	public void setPasswordSalt(String passwordSalt) {
		this.passwordSalt = passwordSalt;
	}

	@Column(name = "password_hash", length = 500)
	public String getPasswordHash() {
		return this.passwordHash;
	}

	public void setPasswordHash(String passwordHash) {
		this.passwordHash = passwordHash;
	}
	
	@Column(name = "alternate_mobile_no", length = 20)
	@Size(max=10, message="Mobile No. should not be more than 10 characters")
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getAlternateMobileNo() {
		return this.alternateMobileNo;
	}

	public void setAlternateMobileNo(String alternateMobileNo) {
		this.alternateMobileNo = alternateMobileNo;
	}

	@Column(name = "control_officer_name", length = 100)
	@Size(max=100, message="Name should not be more than 100 characters")
	@NotBlank
	@Pattern(regexp = "[a-zA-Z\\s]*", message = "Must not contain special characters")
	public String getControlOfficerName() {
		return this.controlOfficerName;
	}

	public void setControlOfficerName(String controlOfficerName) {
		this.controlOfficerName = controlOfficerName;
	}

	@Column(name = "control_officer_number", length = 50)
	@Size(max=50, message="It should not be more than 50 characters")
	@NotBlank
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getControlOfficerNumber() {
		return this.controlOfficerNumber;
	}

	public void setControlOfficerNumber(String controlOfficerNumber) {
		this.controlOfficerNumber = controlOfficerNumber;
	}

	@Column(name = "remarks", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	@Column(name = "usher", nullable = false)
	public boolean isUsher() {
		return this.usher;
	}

	public void setUsher(Boolean usher) { 
	 this.usher = usher;
		
	}

}
