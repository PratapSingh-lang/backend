package in.co.bel.ims.initial.entity;
// Generated 20-Sep-2022, 3:54:24 pm by Hibernate Tools 4.3.5.Final

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Venue generated by hbm2java
 */
@Entity
@Table(name = "venue", schema = "mdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class Venue implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private String address;
	private Integer createdBy;
	private LocalDateTime createdTimestamp;
	private boolean deleted;
	private Integer maxCapacity;
	private Integer modifiedBy;
	private LocalDateTime modifiedTimestamp;
	private String name;
	private Integer parkingCapacity;
	private String remarks;
	@JsonIgnore
	private Set<Event> events = new HashSet<Event>(0);
	@JsonIgnore
	private Set<EnclosureGroup> enclosureGroups = new HashSet<EnclosureGroup>(0);

	public Venue() {
	}

	public Venue(int id) {
		this.id = id;
		
	}

	public Venue(int id, String address, Integer createdBy, LocalDateTime createdTimestamp, boolean deleted, Integer maxCapacity,
			Integer modifiedBy, LocalDateTime modifiedTimestamp, String name, Integer parkingCapacity, String remarks,
			Set<Event> events) {
		this.id = id;
		this.address = address;
		this.createdBy = createdBy;
		this.createdTimestamp = createdTimestamp;
		
		this.maxCapacity = maxCapacity;
		this.modifiedBy = modifiedBy;
		this.modifiedTimestamp = modifiedTimestamp;
		this.name = name;
		this.parkingCapacity = parkingCapacity;
		this.remarks = remarks;
		this.events = events;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "address", length = 500)
	@Size(max=500, message="It should not be more than 500 characters")
	@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()&]*", message = "Must not contain special characters")
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	
	@Column(name = "created_timestamp", length = 29)
	public LocalDateTime getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(LocalDateTime createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	@Column(name = "deleted", nullable = false)
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) { 	 this.deleted = deleted;
		
	}

	@Column(name = "max_capacity")
	@NotNull
	public Integer getMaxCapacity() {
		return this.maxCapacity;
	}

	public void setMaxCapacity(Integer maxCapacity) {
		this.maxCapacity = maxCapacity;
	}

	@Column(name = "modified_by")
	public Integer getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(Integer modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	
	@Column(name = "modified_timestamp", length = 29)
	public LocalDateTime getModifiedTimestamp() {
		return this.modifiedTimestamp;
	}

	public void setModifiedTimestamp(LocalDateTime modifiedTimestamp) {
		this.modifiedTimestamp = modifiedTimestamp;
	}

	@Column(name = "name", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@NotBlank
	@Pattern(regexp = "[-a-zA-Z0-9\\s.,()&]*", message = "Must not contain special characters")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "parking_capacity")
	@NotNull
	public Integer getParkingCapacity() {
		return this.parkingCapacity;
	}

	public void setParkingCapacity(Integer parkingCapacity) {
		this.parkingCapacity = parkingCapacity;
	}

	@Column(name = "remarks", length = 500)
	@Size(max=500, message="It should not be more than 500 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s+@#:,().&']*", message = "Must not contain special characters")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venue")
	public Set<Event> getEvents() {
		return this.events;
	}

	public void setEvents(Set<Event> events) {
		this.events = events;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venue")
	public Set<EnclosureGroup> getEnclosureGroups() {
		return this.enclosureGroups;
	}

	public void setEnclosureGroups(Set<EnclosureGroup> enclosureGroups) {
		this.enclosureGroups = enclosureGroups;
	}

}
