package in.co.bel.ims.initial.entity;
// Generated 20-Sep-2022, 3:54:24 pm by Hibernate Tools 4.3.5.Final

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * CarPass generated by hbm2java
 */
@Entity
@Table(name = "car_pass", schema = "tdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class CarPass implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private PassCategory passCategory;
	private PassStatus passStatus;
	private PassSubcategory passSubcategory;
	private Department department;
	private Event event;
	private Cpl cpl;
	private String controlHash;
	private String controlNo;
	private String controlSalt;
	private String vehNo;
	private Integer createdBy;
	private LocalDateTime createdTimestamp;
	private boolean deleted;
	private Integer modifiedBy;
	private LocalDateTime modifiedTimestamp;
	private String officerName;
	private String officerDesignation;
	private String office;
	private String officerContactNo;
	@JsonIgnore
	private Set<Pass> passes = new HashSet<Pass>(0);

	public CarPass() {
	}

	public CarPass(int id) {
		this.id = id;
		
	}

	public CarPass(int id, Cpl cpl, Department department, PassCategory passCategory, PassStatus passStatus,
			PassSubcategory passSubcategory, Event event, String controlHash, String controlNo, String controlSalt,
			Integer createdBy, LocalDateTime createdTimestamp, boolean deleted, Integer modifiedBy, LocalDateTime modifiedTimestamp,
			String vehNo, String officerName, String officerDesignation, String office, String officerContactNo,
			Set<Pass> passes) {
		this.id = id;
		this.cpl = cpl;
		this.department = department;
		this.passCategory = passCategory;
		this.passStatus = passStatus;
		this.passSubcategory = passSubcategory;
		this.event = event;
		this.controlHash = controlHash;
		this.controlNo = controlNo;
		this.controlSalt = controlSalt;
		this.createdBy = createdBy;
		this.createdTimestamp = createdTimestamp;
		this.deleted = deleted;
		this.modifiedBy = modifiedBy;
		this.modifiedTimestamp = modifiedTimestamp;
		this.vehNo = vehNo;
		this.officerName = officerName;
		this.officerDesignation = officerDesignation;
		this.office = office;
		this.officerContactNo = officerContactNo;
		this.passes = passes;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_category_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PassCategory getPassCategory() {
		return this.passCategory;
	}

	public void setPassCategory(PassCategory passCategory) {
		this.passCategory = passCategory;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_status_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PassStatus getPassStatus() {
		return this.passStatus;
	}

	public void setPassStatus(PassStatus passStatus) {
		this.passStatus = passStatus;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_subcategory_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PassSubcategory getPassSubcategory() {
		return this.passSubcategory;
	}

	public void setPassSubcategory(PassSubcategory passSubcategory) {
		this.passSubcategory = passSubcategory;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cpl_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Cpl getCpl() {
		return this.cpl;
	}

	public void setCpl(Cpl cpl) {
		this.cpl = cpl;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "event_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Event getEvent() {
		return this.event;
	}

	public void setEvent(Event event) {
		this.event = event;
	}
	
	@Column(name = "control_hash", length = 500)
	public String getControlHash() {
		return this.controlHash;
	}

	public void setControlHash(String controlHash) {
		this.controlHash = controlHash;
	}

	@Column(name = "control_no", length = 200)
	public String getControlNo() {
		return this.controlNo;
	}

	public void setControlNo(String controlNo) {
		this.controlNo = controlNo;
	}

	@Column(name = "control_salt", length = 500)
	public String getControlSalt() {
		return this.controlSalt;
	}

	public void setControlSalt(String controlSalt) {
		this.controlSalt = controlSalt;
	}
	
	@Column(name = "veh_no", length = 50)
	@Size(max=50, message="Name should not be more than 50 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s-]*", message = "Must not contain special characters")
	public String getVehNo() {
		return this.vehNo;
	}

	public void setVehNo(String vehNo) {
		this.vehNo = vehNo;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	
	@Column(name = "created_timestamp", length = 29)
	public LocalDateTime getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(LocalDateTime createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	@Column(name = "deleted", nullable = false)
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) { 	 this.deleted = deleted;
		
	}

	@Column(name = "modified_by")
	public Integer getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(Integer modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	
	@Column(name = "modified_timestamp", length = 29)
	public LocalDateTime getModifiedTimestamp() {
		return this.modifiedTimestamp;
	}

	public void setModifiedTimestamp(LocalDateTime modifiedTimestamp) {
		this.modifiedTimestamp = modifiedTimestamp;
	}
	
	@Column(name = "officer_name", length = 200)
	@Size(max=200, message="Name should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z\\s]*", message = "Must not contain special characters")
	public String getOfficerName() {
		return this.officerName;
	}

	public void setOfficerName(String officerName) {
		this.officerName = officerName;
	}

	@Column(name = "officer_designation", length = 200)
	@Size(max=200, message="Name should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s+.,()&/-]*", message = "Must not contain special characters")
	public String getOfficerDesignation() {
		return this.officerDesignation;
	}

	public void setOfficerDesignation(String officerDesignation) {
		this.officerDesignation = officerDesignation;
	}

	@Column(name = "office", length = 500)
	@Size(max=500, message="It should not be more than 500 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()&]*", message = "Must not contain special characters")
	public String getOffice() {
		return this.office;
	}

	public void setOffice(String office) {
		this.office = office;
	}

	@Column(name = "officer_contact_no", length = 20)
	@Size(max=10, min=10, message="It should not be more than 20 characters")
	//@NotBlank
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getOfficerContactNo() {
		return this.officerContactNo;
	}

	public void setOfficerContactNo(String officerContactNo) {
		this.officerContactNo = officerContactNo;
	}

	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "carPass")
	public Set<Pass> getPasses() {
		return this.passes;
	}

	public void setPasses(Set<Pass> passes) {
		this.passes = passes;
	}

}
