package in.co.bel.ims.initial.entity;
// Generated 20-Sep-2022, 3:54:24 pm by Hibernate Tools 4.3.5.Final

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Pass generated by hbm2java
 */
@Entity
@Table(name = "pass", schema = "tdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class Pass implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private Department department;
	private Enclosure enclosure;
	private ImsUser imsUserByImsUserId;
	private ImsUser imsUserByInvitationAdminId;
	private PassStatus passStatus;
	private PassCategory passCategory;
	private PassSubcategory passSubcategory;
	private CarPass carPass;
	private Event event;
	private PaidPassHolders paidPassHolders;
	private AnnexUsers annexUsers;
	private String passHolderName;
	private String controlHash;
	private String controlNo;
	private String controlSalt;
	private Integer createdBy;
	private LocalDateTime createdTimestamp;
	private boolean deleted;
	private boolean downloaded;
	private Integer modifiedBy;
	private LocalDateTime modifiedTimestamp;
	@JsonIgnore
	private Set<PgTransactions> pgTransactionses = new HashSet<PgTransactions>(0);
	private String remarks;

	public Pass() {
	}

	public Pass(int id) {
		this.id = id;
		
	}

	public Pass(int id, Department department, Enclosure enclosure, ImsUser imsUserByImsUserId,
			ImsUser imsUserByInvitationAdminId, PassCategory passCategory, PassStatus passStatus,
			PassSubcategory passSubcategory, CarPass carPass, Event event, String controlHash, String controlNo,
			String controlSalt, Integer createdBy, LocalDateTime createdTimestamp, boolean deleted, Integer modifiedBy,
			LocalDateTime modifiedTimestamp, Boolean downloaded) {
		this.id = id;
		this.department = department;
		this.enclosure = enclosure;
		this.imsUserByImsUserId = imsUserByImsUserId;
		this.imsUserByInvitationAdminId = imsUserByInvitationAdminId;
		this.passCategory = passCategory;
		this.passStatus = passStatus;
		this.passSubcategory = passSubcategory;
		this.carPass = carPass;
		this.event = event;
		this.controlHash = controlHash;
		this.controlNo = controlNo;
		this.controlSalt = controlSalt;
		this.createdBy = createdBy;
		this.createdTimestamp = createdTimestamp;
		this.deleted = deleted;
		this.modifiedBy = modifiedBy;
		this.modifiedTimestamp = modifiedTimestamp;
		this.downloaded = downloaded;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "enclosure_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Enclosure getEnclosure() {
		return this.enclosure;
	}

	public void setEnclosure(Enclosure enclosure) {
		this.enclosure = enclosure;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ims_user_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public ImsUser getImsUserByImsUserId() {
		return this.imsUserByImsUserId;
	}

	public void setImsUserByImsUserId(ImsUser imsUserByImsUserId) {
		this.imsUserByImsUserId = imsUserByImsUserId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "invitation_admin_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public ImsUser getImsUserByInvitationAdminId() {
		return this.imsUserByInvitationAdminId;
	}

	public void setImsUserByInvitationAdminId(ImsUser imsUserByInvitationAdminId) {
		this.imsUserByInvitationAdminId = imsUserByInvitationAdminId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_status_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PassStatus getPassStatus() {
		return this.passStatus;
	}

	public void setPassStatus(PassStatus passStatus) {
		this.passStatus = passStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_category_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PassCategory getPassCategory() {
		return this.passCategory;
	}

	public void setPassCategory(PassCategory passCategory) {
		this.passCategory = passCategory;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_subcategory_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PassSubcategory getPassSubcategory() {
		return this.passSubcategory;
	}

	public void setPassSubcategory(PassSubcategory passSubcategory) {
		this.passSubcategory = passSubcategory;
	}
	
	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	@JoinColumn(name = "car_pass_id")
	public CarPass getCarPass() {
		return this.carPass;
	}

	public void setCarPass(CarPass carPass) {
		this.carPass = carPass;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "event_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Event getEvent() {
		return this.event;
	}

	public void setEvent(Event event) {
		this.event = event;
	}
	
	@Column(name = "pass_holder_name", length = 200)
	@Size(max=200, message="Name should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z.,\\s]*", message = "Must not contain special characters")
	public String getPassHolderName() {
		return this.passHolderName;
	}

	public void setPassHolderName(String passHolderName) {
		this.passHolderName = passHolderName;
	}

	@Column(name = "control_hash", length = 500)
	public String getControlHash() {
		return this.controlHash;
	}

	public void setControlHash(String controlHash) {
		this.controlHash = controlHash;
	}

	@Column(name = "control_no", length = 200)
	public String getControlNo() {
		return this.controlNo;
	}

	public void setControlNo(String controlNo) {
		this.controlNo = controlNo;
	}

	@Column(name = "control_salt", length = 500)
	public String getControlSalt() {
		return this.controlSalt;
	}

	public void setControlSalt(String controlSalt) {
		this.controlSalt = controlSalt;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	
	@Column(name = "created_timestamp", length = 29)
	public LocalDateTime getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(LocalDateTime createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	@Column(name = "deleted", nullable = false)
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) { 	 this.deleted = deleted;
		
	}
	
	@Column(name = "downloaded", nullable = false)
	public boolean isDownloaded() {
		return this.downloaded;
	}

	public void setDownloaded(Boolean downloaded) { 
	 this.downloaded = downloaded;
		
	}

	@Column(name = "modified_by")
	public Integer getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(Integer modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	
	@Column(name = "modified_timestamp", length = 29)
	public LocalDateTime getModifiedTimestamp() {
		return this.modifiedTimestamp;
	}

	public void setModifiedTimestamp(LocalDateTime modifiedTimestamp) {
		this.modifiedTimestamp = modifiedTimestamp;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pass")
	public Set<PgTransactions> getPgTransactionses() {
		return this.pgTransactionses;
	}

	public void setPgTransactionses(Set<PgTransactions> pgTransactionses) {
		this.pgTransactionses = pgTransactionses;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "paid_pass_holders_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public PaidPassHolders getPaidPassHolders() {
		return this.paidPassHolders;
	}

	public void setPaidPassHolders(PaidPassHolders paidPassHolders) {
		this.paidPassHolders = paidPassHolders;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "annex_users_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public AnnexUsers getAnnexUsers() {
		return this.annexUsers;
	}

	public void setAnnexUsers(AnnexUsers annexUsers) {
		this.annexUsers = annexUsers;
	}

	@Column(name = "remarks", length = 200)
	@Size(max=200, message="Remarks should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

}
