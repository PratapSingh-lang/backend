package in.co.bel.ims.initial.entity;
// Generated 20-Sep-2022, 3:54:24 pm by Hibernate Tools 4.3.5.Final

import java.time.LocalDateTime;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.PastOrPresent;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * ImsUser generated by hbm2java
 */
@Entity
@Table(name = "ims_user", schema = "mdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class ImsUser implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private Department department;
	private EnclosureGroup enclosureGroup;
	private GuestType guestType;
	private IdentityProof identityProof;
	private MaritalStatus maritalStatus;
	private PayLevel payLevel;
	private Precedence precedence;
	private Role role;
	private Salutation salutation;
	private UserType userType;
	private String name;
	private String empNo;
	private String mobileNo;
	private String email;
	private String designation;
	private String office;
	private String constituency;
	private String remarks;
	private String equivalentStatus;
	private String basicPay;
	private String nationality;
	private String idProofNo;
	private String positionMissionConsulate;
	private String passwordSalt;
	private String passwordHash;
	private boolean deleted;
	private LocalDateTime createdTimestamp;
	private LocalDateTime modifiedTimestamp;
	private Integer createdBy;
	private Integer modifiedBy;
	private Integer loginAttempts = 0;
	private Integer loggedIn = 0;
	private Boolean locked = false;
	private LocalDateTime lastLogin;
	private LocalDateTime lastLocked;
	private int status = 1;
	private String password;
	private String passwordEmail;
	private String officeAddress;
	private String residentialAddress;
	private Date doj;
	private String recommendingOfficerName;
	private String recommendingOfficerDesignation;
	private Date dateOfBirth;
	private byte[] idProofDocument;
	@JsonIgnore
	private Set<Notification> notifications = new HashSet<Notification>(0);
	@JsonIgnore
	private Set<InvitationOfficer> invitationOfficers = new HashSet<InvitationOfficer>(0);
	@JsonIgnore
	private Set<NodalOfficer> nodalOfficers = new HashSet<NodalOfficer>(0);
	@JsonIgnore
	private Set<HigherOfficer> higherOfficers = new HashSet<HigherOfficer>(0);
	@JsonIgnore
	private Set<Organizer> organizers = new HashSet<Organizer>(0);
	@JsonIgnore
	private Set<AllowedMachines> allowedMachineses = new HashSet<AllowedMachines>(0);
	@JsonIgnore
	private Set<Pass> passesForImsUserId = new HashSet<Pass>(0);
	@JsonIgnore
	private Set<Pass> passesForInvitationAdminId = new HashSet<Pass>(0);
	@JsonIgnore
	private Set<UserIpaddress> userIpaddresses = new HashSet<UserIpaddress>(0);
	@JsonIgnore
	private Set<PaidPassHolders> paidPassHolderses = new HashSet<PaidPassHolders>(0);
	@JsonIgnore
	private Set<UserPasswordPolicy> userPasswordPolicies = new HashSet<UserPasswordPolicy>(0);


	public ImsUser() {
	}

	public ImsUser(int id) {
		this.id = id;
		
	}

	public ImsUser(int id, Department department, EnclosureGroup enclosureGroup, GuestType guestType,
			IdentityProof identityProof, MaritalStatus maritalStatus, PayLevel payLevel, Precedence precedence,
			Role role, Salutation salutation, UserType userType, String name, String empNo, String mobileNo,
			String email, String designation, String office, String constituency, String remarks,
			String equivalentStatus, String basicPay, String nationality, String idProofNo,
			String positionMissionConsulate, String passwordSalt, String passwordHash, boolean deleted,
			LocalDateTime createdTimestamp, LocalDateTime modifiedTimestamp, Integer createdBy, Integer modifiedBy, Integer status,
			LocalDateTime lastLocked, LocalDateTime lastLogin, Boolean locked, Integer loggedIn, Integer loginAttempts, String password,
			String officeAddress, String residentialAddress, Date doj, String recommendingOfficerName,
			String recommendingOfficerDesignation, Set<Pass> passesForImsUserId, Set<NodalOfficer> nodalOfficers,
			Set<AllowedMachines> allowedMachineses, Set<Notification> notifications, Set<HigherOfficer> higherOfficers,
			Set<Pass> passesForInvitationAdminId, Set<Organizer> organizers,
			Set<InvitationOfficer> invitationOfficers) {
		this.id = id;
		this.department = department;
		this.enclosureGroup = enclosureGroup;
		this.guestType = guestType;
		this.identityProof = identityProof;
		this.maritalStatus = maritalStatus;
		this.payLevel = payLevel;
		this.precedence = precedence;
		this.role = role;
		this.salutation = salutation;
		this.userType = userType;
		this.name = name;
		this.empNo = empNo;
		this.mobileNo = mobileNo;
		this.email = email;
		this.designation = designation;
		this.office = office;
		this.constituency = constituency;
		this.remarks = remarks;
		this.equivalentStatus = equivalentStatus;
		this.basicPay = basicPay;
		this.nationality = nationality;
		this.idProofNo = idProofNo;
		this.positionMissionConsulate = positionMissionConsulate;
		this.passwordSalt = passwordSalt;
		this.passwordHash = passwordHash;
		this.deleted = deleted;
		this.createdTimestamp = createdTimestamp;
		this.modifiedTimestamp = modifiedTimestamp;
		this.createdBy = createdBy;
		this.modifiedBy = modifiedBy;
		this.status = status;
		this.lastLocked = lastLocked;
		this.lastLogin = lastLogin;
		this.locked = locked;
		this.loggedIn = loggedIn;
		this.loginAttempts = loginAttempts;
		this.password = password;
		this.officeAddress = officeAddress;
		this.residentialAddress = residentialAddress;
		this.doj = doj;
		this.recommendingOfficerName = recommendingOfficerName;
		this.recommendingOfficerDesignation = recommendingOfficerDesignation;
		this.passesForImsUserId = passesForImsUserId;
		this.nodalOfficers = nodalOfficers;
		this.allowedMachineses = allowedMachineses;
		this.notifications = notifications;
		this.higherOfficers = higherOfficers;
		this.passesForInvitationAdminId = passesForInvitationAdminId;
		this.organizers = organizers;
		this.invitationOfficers = invitationOfficers;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "enclosure_group_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public EnclosureGroup getEnclosureGroup() {
		return this.enclosureGroup;
	}

	public void setEnclosureGroup(EnclosureGroup enclosureGroup) {
		this.enclosureGroup = enclosureGroup;
	}
	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "guest_type_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public GuestType getGuestType() {
		return this.guestType;
	}

	public void setGuestType(GuestType guestType) {
		this.guestType = guestType;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_proof_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public IdentityProof getIdentityProof() {
		return this.identityProof;
	}

	public void setIdentityProof(IdentityProof identityProof) {
		this.identityProof = identityProof;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "marital_status")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public MaritalStatus getMaritalStatus() {
		return this.maritalStatus;
	}

	public void setMaritalStatus(MaritalStatus maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pay_level_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public PayLevel getPayLevel() {
		return this.payLevel;
	}

	public void setPayLevel(PayLevel payLevel) {
		this.payLevel = payLevel;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "precedence_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Precedence getPrecedence() {
		return this.precedence;
	}

	public void setPrecedence(Precedence precedence) {
		this.precedence = precedence;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "salutation_id")
	//@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public Salutation getSalutation() {
		return this.salutation;
	}

	public void setSalutation(Salutation salutation) {
		this.salutation = salutation;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_type_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) 
	public UserType getUserType() {
		return this.userType;
	}

	public void setUserType(UserType userType) {
		this.userType = userType;
	}

	@Column(name = "name", length = 200)
	@Size(max=200, message="Name should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z,.\\s]*", message = "Must not contain special characters")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "emp_no", length = 50)
	@Size(max=50, message="It should not be more than 50 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s/-]*", message = "Must not contain special characters")
	public String getEmpNo() {
		return this.empNo;
	}

	public void setEmpNo(String empNo) {
		this.empNo = empNo;
	}

	@Column(name = "mobile_no", length = 20)
	@Size(min=10, max=10, message="Mobile No. should not be more than 10 characters")
	@NotBlank
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getMobileNo() {
		return this.mobileNo;
	}

	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}

	@Column(name = "email", length = 100)
	@Size(max=100, message="It should not be more than 100 characters")
	//@NotBlank
	@Pattern(regexp = "^(?=.{1,100}@)[A-Za-z0-9_-]+([A-Za-z0-9._-]+)*@[^-][A-Za-z0-9-]+([A-Za-z0-9.-]+)*(.[A-Za-z]{2,})$", message = "Please enter valid email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "designation", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()/&]*", message = "Must not contain special characters")
	public String getDesignation() {
		return this.designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	@Column(name = "office", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()&]*", message = "Must not contain special characters")
	public String getOffice() {
		return this.office;
	}

	public void setOffice(String office) {
		this.office = office;
	}

	@Column(name = "constituency", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.,()&-]*", message = "Must not contain special characters")
	public String getConstituency() {
		return this.constituency;
	}

	public void setConstituency(String constituency) {
		this.constituency = constituency;
	}

	@Column(name = "remarks")
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "equivalent_status", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.&()]*", message = "Must not contain special characters")
	public String getEquivalentStatus() {
		return this.equivalentStatus;
	}

	public void setEquivalentStatus(String equivalentStatus) {
		this.equivalentStatus = equivalentStatus;
	}

	@Column(name = "basic_pay", length = 20)
	@Size(max=8, message="It should not be more than 8 characters")
	@Pattern(regexp = "[0-9\\s]*", message = "Must not contain special characters")
	public String getBasicPay() {
		return this.basicPay;
	}

	public void setBasicPay(String basicPay) {
		this.basicPay = basicPay;
	}

	@Column(name = "nationality", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[A-za-z\\s]*", message = "Must not contain special characters")
	public String getNationality() {
		return this.nationality;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	@Column(name = "id_proof_no", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	//@NotBlank
	@Pattern(regexp = "[a-zA-Z0-9\\s/-]*", message = "Must not contain special characters")
	public String getIdProofNo() {
		return this.idProofNo;
	}

	public void setIdProofNo(String idProofNo) {
		this.idProofNo = idProofNo;
	}

	@Column(name = "position_mission_consulate", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z\\s.,&()/]*", message = "Must not contain special characters")
	public String getPositionMissionConsulate() {
		return this.positionMissionConsulate;
	}

	public void setPositionMissionConsulate(String positionMissionConsulate) {
		this.positionMissionConsulate = positionMissionConsulate;
	}

	@Column(name = "password", length = 500)
	@Size(max=500, message="It should not be more than 500 characters")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	@Column(name = "password_email", length = 500)
	@Size(max=500, message="It should not be more than 500 characters")
	public String getPasswordEmail() {
		return this.passwordEmail;
	}

	public void setPasswordEmail(String passwordEmail) {
		this.passwordEmail = passwordEmail;
	}
	
	@Column(name = "password_salt", length = 500)
	public String getPasswordSalt() {
		return this.passwordSalt;
	}

	public void setPasswordSalt(String passwordSalt) {
		this.passwordSalt = passwordSalt;
	}

	@Column(name = "password_hash", length = 500)
	public String getPasswordHash() {
		return this.passwordHash;
	}

	public void setPasswordHash(String passwordHash) {
		this.passwordHash = passwordHash;
	}

	@Column(name = "deleted", nullable = false)
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) { 	 this.deleted = deleted;
		
	}

	@Column(name = "created_timestamp", length = 29)
	public LocalDateTime getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(LocalDateTime createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	@Column(name = "modified_timestamp", length = 29)
	public LocalDateTime getModifiedTimestamp() {
		return this.modifiedTimestamp;
	}

	public void setModifiedTimestamp(LocalDateTime modifiedTimestamp) {
		this.modifiedTimestamp = modifiedTimestamp;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "modified_by")
	public Integer getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(Integer modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<Notification> getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Set<Notification> notifications) {
		this.notifications = notifications;
	}

	@Column(name = "login_attempts")
	public Integer getLoginAttempts() {
		return this.loginAttempts;
	}

	public void setLoginAttempts(Integer loginAttempts) {
		this.loginAttempts = loginAttempts;
	}

	@Column(name = "logged_in")
	public Integer getLoggedIn() {
		return this.loggedIn;
	}

	public void setLoggedIn(Integer loggedIn) {
		this.loggedIn = loggedIn;
	}

	@Column(name = "locked")
	public Boolean getLocked() {
		return this.locked;
	}

	public void setLocked(Boolean locked) {
		this.locked = locked;
	}

	@Column(name = "last_login", length = 29)
	public LocalDateTime getLastLogin() {
		return this.lastLogin;
	}

	public void setLastLogin(LocalDateTime lastLogin) {
		this.lastLogin = lastLogin;
	}

	@Column(name = "last_locked", length = 29)
	public LocalDateTime getLastLocked() {
		return this.lastLocked;
	}

	public void setLastLocked(LocalDateTime lastLocked) {
		this.lastLocked = lastLocked;
	}
	
	@Column(name = "status")
	public int getStatus() {
		return this.status;
	}

	public void setStatus(int status) {
		this.status = status;
	}
	
	@Column(name = "office_address", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getOfficeAddress() {
		return this.officeAddress;
	}

	public void setOfficeAddress(String officeAddress) {
		this.officeAddress = officeAddress;
	}

	@Column(name = "residential_address", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z0-9\\s.'@%&/,()#-]*", message = "Must not contain special characters")
	public String getResidentialAddress() {
		return this.residentialAddress;
	}

	public void setResidentialAddress(String residentialAddress) {
		this.residentialAddress = residentialAddress;
	}
	
	@Temporal(TemporalType.DATE)
	@PastOrPresent(message = "DoJ can't be a future date")
	@Column(name = "doj", length = 13)
	public Date getDoj() {
		return this.doj;
	}

	public void setDoj(Date doj) {
		this.doj = doj;
	}
	
	@Column(name = "recommending_officer_name", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z\\s]*", message = "Must not contain special characters")
	public String getRecommendingOfficerName() {
		return this.recommendingOfficerName;
	}

	public void setRecommendingOfficerName(String recommendingOfficerName) {
		this.recommendingOfficerName = recommendingOfficerName;
	}

	@Column(name = "recommending_officer_designation", length = 200)
	@Size(max=200, message="It should not be more than 200 characters")
	@Pattern(regexp = "[a-zA-Z\\s.,&()/]*", message = "Must not contain special characters")
	public String getRecommendingOfficerDesignation() {
		return this.recommendingOfficerDesignation;
	}

	public void setRecommendingOfficerDesignation(String recommendingOfficerDesignation) {
		this.recommendingOfficerDesignation = recommendingOfficerDesignation;
	}
	
	@Temporal(TemporalType.DATE)
	@PastOrPresent(message = "Date of birth can't be a future date")
	@Column(name = "date_of_birth", length = 13)
	//@NotNull
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<InvitationOfficer> getInvitationOfficers() {
		return this.invitationOfficers;
	}

	public void setInvitationOfficers(Set<InvitationOfficer> invitationOfficers) {
		this.invitationOfficers = invitationOfficers;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<HigherOfficer> getHigherOfficers() {
		return this.higherOfficers;
	}

	public void setHigherOfficers(Set<HigherOfficer> higherOfficers) {
		this.higherOfficers = higherOfficers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<Organizer> getOrganizers() {
		return this.organizers;
	}

	public void setOrganizers(Set<Organizer> organizers) {
		this.organizers = organizers;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<NodalOfficer> getNodalOfficers() {
		return this.nodalOfficers;
	}

	public void setNodalOfficers(Set<NodalOfficer> nodalOfficers) {
		this.nodalOfficers = nodalOfficers;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<AllowedMachines> getAllowedMachineses() {
		return this.allowedMachineses;
	}

	public void setAllowedMachineses(Set<AllowedMachines> allowedMachineses) {
		this.allowedMachineses = allowedMachineses;
	}
	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUserByInvitationAdminId")
	public Set<Pass> getPassesForInvitationAdminId() {
		return this.passesForInvitationAdminId;
	}

	public void setPassesForInvitationAdminId(Set<Pass> passesForInvitationAdminId) {
		this.passesForInvitationAdminId = passesForInvitationAdminId;
	}
	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUserByImsUserId")
	public Set<Pass> getPassesForImsUserId() {
		return this.passesForImsUserId;
	}

	public void setPassesForImsUserId(Set<Pass> passesForImsUserId) {
		this.passesForImsUserId = passesForImsUserId;
	}
	
	@Column(name = "id_proof_document")
	public byte[] getIdProofDocument() {
		return this.idProofDocument;
	}

	public void setIdProofDocument(byte[] idProofDocument) {
		this.idProofDocument = idProofDocument;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<PaidPassHolders> getPaidPassHolderses() {
		return this.paidPassHolderses;
	}

	public void setPaidPassHolderses(Set<PaidPassHolders> paidPassHolderses) {
		this.paidPassHolderses = paidPassHolderses;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<UserIpaddress> getUserIpaddresses() {
		return this.userIpaddresses;
	}

	public void setUserIpaddresses(Set<UserIpaddress> userIpaddresses) {
		this.userIpaddresses = userIpaddresses;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "imsUser")
	public Set<UserPasswordPolicy> getUserPasswordPolicies() {
		return this.userPasswordPolicies;
	}

	public void setUserPasswordPolicies(Set<UserPasswordPolicy> userPasswordPolicies) {
		this.userPasswordPolicies = userPasswordPolicies;
	}

}
