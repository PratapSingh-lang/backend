package in.co.bel.ims.initial.entity;
// Generated 23-Nov-2022, 6:10:13 pm by Hibernate Tools 4.3.5.Final

import java.time.LocalDateTime;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * PassDayLimitCategory generated by hbm2java
 */
@Entity
@Table(name = "pass_day_limit_category", schema = "tdms")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class PassDayLimitCategory implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private EnclosureGroup enclosureGroup;
	private PassSubcategory passSubcategory;
	private Role role;
	private PassDayLimit passDayLimit;
	private Integer passLimit;
	private LocalDateTime createdTimestamp;
	private Date modifiedTimestamp;
	private Boolean deleted = false;;

	public PassDayLimitCategory() {
	}

	public PassDayLimitCategory(int id) {
		this.id = id;
	}

	public PassDayLimitCategory(int id, EnclosureGroup enclosureGroup, PassSubcategory passSubcategory, Role role,
			PassDayLimit passDayLimit, Integer passLimit, LocalDateTime createdTimestamp, Date modifiedTimestamp, Boolean deleted) {
		this.id = id;
		this.enclosureGroup = enclosureGroup;
		this.passSubcategory = passSubcategory;
		this.role = role;
		this.passDayLimit = passDayLimit;
		this.passLimit = passLimit;
		this.createdTimestamp = createdTimestamp;
		this.modifiedTimestamp = modifiedTimestamp;
		this.deleted = deleted;
	}

	@Id
	@GenericGenerator(name = "sequencePerEntityGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = {
			@Parameter(name = "prefer_sequence_per_entity", value = "true"),
			@Parameter(name = "initial_value", value = "1"),
			@Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1") })
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePerEntityGenerator")
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "enclosure_group_id")
	@NotNull
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public EnclosureGroup getEnclosureGroup() {
		return this.enclosureGroup;
	}

	public void setEnclosureGroup(EnclosureGroup enclosureGroup) {
		this.enclosureGroup = enclosureGroup;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_subcategory_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public PassSubcategory getPassSubcategory() {
		return this.passSubcategory;
	}

	public void setPassSubcategory(PassSubcategory passSubcategory) {
		this.passSubcategory = passSubcategory;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pass_day_limit_id")
	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	public PassDayLimit getPassDayLimit() {
		return this.passDayLimit;
	}

	public void setPassDayLimit(PassDayLimit passDayLimit) {
		this.passDayLimit = passDayLimit;
	}

	@Column(name = "pass_limit")
	@NotNull
	@Min(value = 1)
	public Integer getPassLimit() {
		return this.passLimit;
	}

	public void setPassLimit(Integer passLimit) {
		this.passLimit = passLimit;
	}

	@Column(name = "created_timestamp", length = 29)
	public LocalDateTime getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(LocalDateTime createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified_timestamp", length = 29)
	public Date getModifiedTimestamp() {
		return this.modifiedTimestamp;
	}

	public void setModifiedTimestamp(Date modifiedTimestamp) {
		this.modifiedTimestamp = modifiedTimestamp;
	}

	@Column(name = "deleted")
	public Boolean getDeleted() {
		return this.deleted;
	}

	public void setDeleted(Boolean deleted) {
		this.deleted = deleted;
	}

}
